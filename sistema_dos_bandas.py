# -*- coding: utf-8 -*-
"""Sistema_dos_bandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W5OCKV5mO-LMYaARbS2_FCvWsFUR92gK

# Ejercicio 2: Sistema de dos bandas

Importamos las funciones que vamos a necesitar, estas las vimos en clase:
"""

# @title Formulario
import numpy as np
def SustitucionDelante(Mat, b):
    n = Mat.shape[0]
    x = np.zeros(n)

    for i in range(n):
        SumCum = 0.0
        for j in range(i):
            SumCum += Mat[i, j] * x[j]
        x[i] = (b[i] - SumCum) / Mat[i, i]

    return x

def SustitucionAtras(Mat, b):
    n = Mat.shape[0]
    x = np.zeros(n)

    for i in range(n-1, -1, -1):
        SumCum = 0.0
        for j in range(i+1, n):
            SumCum += Mat[i, j] * x[j]
        x[i] = (b[i] - SumCum) / Mat[i, i]

    return x

"""Ahora hacemos el programa, tenemos que si la banda es diagonal superior usaremos la sustitución hacia atras, y si es diagonal inferior usaremos sustitución hacia adelante, y si no es ninguna de las 2, mandaremos un error ya que la matriz no es estrictamente bidiagonal (en este caso se resolvería con el algoritmo de Thomas)"""

def resolver_sistema_bandas(A, b):
    DP = np.diag(A)
    DS = np.diag(A, k=1)
    DI = np.diag(A, k=-1)

    if np.count_nonzero(DI) > 0 and np.count_nonzero(DS) == 0:  # Cuenta el número de elementos que NO son cero, si es mayor que 0 esto significa que estamos en el caso de diagonal inferior,
        return SustitucionDelante(A, b)                         # también verifica que sea 0 la diagonal superior
    elif np.count_nonzero(DS) > 0 and np.count_nonzero(DI) == 0:  # Solo banda superior, hace lo mismo que la de arriba
        return SustitucionAtras(A, b)
    else:
        raise ValueError("La matriz no es estrictamente bidiagonal")

"""Ahora probaremos la función con la que tiene Numpy, lo haremos para los 2 casos:"""

from numpy import linalg as LA
A_superior = np.array([[2, 1, 0],
                        [0, 3, 2],
                        [0, 0, 4]], dtype=float)
b_superior = np.array([5, 8, 12], dtype=float)

solucion_superior = resolver_sistema_bandas(A_superior, b_superior)
print("Solución para matriz con banda superior:", solucion_superior)

# Resolvemos con Numpy para poder comparar los resultados
solucion_numpy = LA.solve(A_superior, b_superior)
print("Solución con numpy es:", solucion_numpy)

A_inferior = np.array([[3, 0, 0],
                        [2, 5, 0],
                        [1, 4, 6]], dtype=float)
b_inferior = np.array([6, 15, 28], dtype=float)

solucion_inferior = resolver_sistema_bandas(A_inferior, b_inferior)
print("Solución para matriz con banda inferior:", solucion_inferior)

# Resolvemos con Numpy para poder comparar los resultados
solucion_numpy = LA.solve(A_inferior, b_inferior)
print("Solución con numpy es:", solucion_numpy)